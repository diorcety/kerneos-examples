<?xml version="1.0" encoding="utf-8"?>
<!--
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - JASMINe
     - Copyright (C) 2010 Bull S.A.S.
     - Contact: jasmine@ow2.org
     -
     - This library is free software; you can redistribute it and/or
     - modify it under the terms of the GNU Lesser General Public
     - License as published by the Free Software Foundation; either
     - version 2.1 of the License, or any later version.
     -
     - This library is distributed in the hope that it will be useful,
     - but WITHOUT ANY WARRANTY; without even the implied warranty of
     - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     - Lesser General Public License for more details.
     -
     - You should have received a copy of the GNU Lesser General Public
     - License along with this library; if not, write to the Free Software
     - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
     - USA
     -
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - $Id$
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:TitleWindow title="{resourceManager.getString('probemanagerResources', 'manageOutput.window.title')}"
                xmlns:mx="http://www.adobe.com/2006/mxml"
                showCloseButton="true"
                styleName="probes"
                borderAlpha="1"
                close="{util.closeOutputWindow()}">
    <mx:Script>
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.ValidationResultEvent;
        import mx.validators.Validator;
        import mx.resources.ResourceManager;

        import org.ow2.jasmine.monitoring.eos.probemanager.vo.*;

        [Bindable]
        protected var output:ProbeOutput;
        [Bindable]
        protected var util:ProbeManagerUtil;

        [Bindable]
        protected var create:Boolean;

        [Bindable]
        private var validators:ArrayCollection = new ArrayCollection();

        // TODO use a map
        public var outputDestNames:ArrayCollection = new ArrayCollection(["console", "jasmine", "logfile"]);

        /**
         * Init the module
         * @param u ProbeManagerUtil
         * @param o The ProbeOutput model
         * @param c True if creating a new output
         */
        public function init(u:ProbeManagerUtil, o:ProbeOutput, c:Boolean):void {
            this.util = u;
            this.output = o;
            this.create = c;
            if (create) {
                // Clear the name
                outputId.text = "";
                // Add a reset button
                var reset:Button = new Button();
                reset.label = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.resetButton');
                reset.addEventListener(MouseEvent.CLICK, resetForm);
                buttonList.addChildAt(reset, 0);
                // Add a create Button
                var create:Button = new Button();
                create.label = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.createButton');
                create.addEventListener(MouseEvent.CLICK, createOutput);
                buttonList.addChildAt(create, 0);
            } else {
                // Add a delete button
                var del:Button = new Button();
                del.label = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.deleteButton');
                del.addEventListener(MouseEvent.CLICK, deleteOutput);
                buttonList.addChildAt(del, 0);
                // Add a modify Button
                var modify:Button = new Button();
                modify.label = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.applyButton');
                modify.addEventListener(MouseEvent.CLICK, modifyOutput);
                buttonList.addChildAt(modify, 0);
            }
            currentState = stringDest(output.dest);
            // avoids to validate an empty form.
            //validators.addItem(dest_validator);
        }

        private function stringDest(d:int):String {
            if (d == ProbeOutput.OUTPUT_CONSOLE)
                return "console";
            if (d == ProbeOutput.OUTPUT_JASMINE)
                return "jasmine";
            if (d == ProbeOutput.OUTPUT_LOGFILE)
                return "logfile";
            return "";
        }

        private function deleteOutput(evt:Event):void {
            util.deleteOutput();
        }

        private function createOutput(evt:Event):void {
            if (validateForm()) {
                // No error returned: validation ok
                util.addOutput();
            }
        }

        private function modifyOutput(evt:Event):void {
            if (validateForm()) {
                // No error returned: validation ok
                util.modifyOutput();
            }
        }

        /**
         * Validate the Form
         * @return true if OK
         */
        private function validateForm():Boolean {
            var mess:Array = [];
            if (outputId != null) {
                var message:String = ResourceManager.getInstance().getString('probemanagerResources', 'manageOutput.error.outputInfo') + " = " + outputId.text;
                mess.push(message);
            }
            if (destType != null){
                var message:String = ResourceManager.getInstance().getString('probemanagerResources', 'manageOutput.error.destInfo') + " = " + destType.selectedIndex;
                mess.push(message);
                if (destType.selectedIndex == -1) {
                    var invalidPanelTitle = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.error.title');
                    var messageReq = ResourceManager.getInstance().getString('probemanagerResources', 'manageOutput.error.destRequired');
                    Alert.show(messageReq, invalidPanelTitle, Alert.OK);
                    return false;
                }
            }
            if (path != null) {
                var message:String = ResourceManager.getInstance().getString('probemanagerResources', 'manageOutput.error.pathInfo');
                mess.push(message + " = " + path.text);
            }
            var vreList:Array = Validator.validateAll(validators.source);
            if (vreList.length > 0) {
                var vre:ValidationResultEvent;
                for each (vre in vreList) {
                   var errField:String = FormItem(vre.currentTarget.source.parent).label;
                   var errMessage:String = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.error.message') + errField + " : " + vre.message;
                   mess.push(errMessage);
                }
                var invalidPanelTitle = ResourceManager.getInstance().getString('probemanagerResources', 'manageTarget.error.title');
                Alert.show(mess.join("\n\n"), invalidPanelTitle, Alert.OK);
                return false;
            }
            return true;
        }

        /**
         * reset the Form (RESET Button)
         */
        private function resetForm(evt:Event):void {
            currentState = "";
            destType.selectedIndex = -1;
            outputId.text = "";
            validators.removeAll();
            //validators.addItem(dest_validator);
        }

        private function enterConsoleState():void {
            validators.removeAll();
            validators.addItem(id_validator);
            //validators.addItem(dest_validator);
        }

        private function enterJasmineState():void {
            validators.removeAll();
            validators.addItem(id_validator);
            //validators.addItem(dest_validator);
            //validators.addItem(host_validator);
            //validators.addItem(port_validator);
        }

        private function enterLogfileState():void {
            validators.removeAll();
            validators.addItem(id_validator);
            //validators.addItem(dest_validator);
            validators.addItem(path_validator);
        }
        ]]>
    </mx:Script>

    <mx:states>
        <mx:State name="console"
                  enterState="enterConsoleState()">
        </mx:State>
        <mx:State name="jasmine"
                  enterState="enterJasmineState()">
            <!-- mx:AddChild relativeTo="{fi_dest}"
                         position="after">
                <mx:FormItem id="fi_host"
                             label="host name">
                    <mx:TextInput id="host"
                                  text="{output.host}"/>
                </mx:FormItem>
            </mx:AddChild>
            <mx:AddChild relativeTo="{fi_host}"
                         position="after">
                <mx:FormItem label="port number">
                    <mx:TextInput id="port"
                                  text="{output.port}"/>
                </mx:FormItem>
            </mx:AddChild -->
        </mx:State>
        <mx:State name="logfile"
                  enterState="enterLogfileState()">
            <mx:AddChild relativeTo="{fi_dest}"
                         position="after">
                <mx:FormItem label="{resourceManager.getString('probemanagerResources', 'manageOutput.pathForm.label')}">
                    <mx:TextInput id="path"
                                  text="{output.path}"/>
                </mx:FormItem>
            </mx:AddChild>
        </mx:State>
    </mx:states>

    <mx:StringValidator id="id_validator"
                        source="{outputId}"
                        property="text"
                        tooShortError="This field is required."
                        minLength="1"/>
    <mx:NumberValidator id="dest_validator"
                        source="{destType}"
                        lowerThanMinError="This field is required."
                        property="selectedIndex"
                        minValue="0"/>
    <mx:StringValidator id="path_validator"
                        source="{path}"
                        property="text"
                        minLength="1"/>

    <mx:Form id="myform">
        <mx:FormHeading label="{resourceManager.getString('probemanagerResources', 'manageTarget.form.label')}"/>
        <mx:FormItem label="{resourceManager.getString('probemanagerResources', 'manageTarget.idForm.label')}"
                     required="true">
            <mx:TextInput id="outputId"
                          text="{output.name}"/>
        </mx:FormItem>
        <mx:FormItem id="fi_dest"
                     label="{resourceManager.getString('probemanagerResources', 'manageOutput.destinationForm.label')}"
                     required="true">
            <mx:ComboBox id="destType"
                         dataProvider="{outputDestNames}"
                         selectedItem="{currentState}"
                         close="{currentState = destType.selectedLabel}"/>
        </mx:FormItem>
    </mx:Form>
    <mx:HBox id="buttonList">
        <mx:Button label="{resourceManager.getString('probemanagerResources', 'manageTarget.cancelLabel')}"
                   click="{util.closeOutputWindow()}"/>
    </mx:HBox>

    <mx:HBox id="debug"
             visible="false"
             styleName="debug">
        <mx:Label text="debug:"/>
        <mx:Label text="{currentState}"/>
    </mx:HBox>
</mx:TitleWindow>
